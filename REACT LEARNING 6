Map() Method in Javascript
The map() method is used to create a new array by transforming each item of an existing array using a function you provide. It's like telling JavaScript: ‚ÄúHey, go through this array, do something to each item, and give me back a new array with the results.‚Äù The original array stays untouched, which is great when you want to transform data without modifying the source.

Example 1: Implicit Return

let numbers = [5, 10, 15];

let divided = numbers.map(num => num / 5);

console.log(divided); // Output - [1, 2, 3]
In this example, we're dividing each number by 5. Since the arrow function is a single line without curly braces, it automatically returns the result. This is called an implicit return, and it's perfect for short, simple operations.

Example 2: Explicit Return

let nums = [1, 2, 3];

let doubled = nums.map(n => {
  return n * 2;
});

console.log(doubled); // Output -  [2, 4, 6]
Here, the arrow function uses curly braces, which means we need to use the return keyword. This is useful when your logic is more than one line or when you want to keep things consistent.

Example 3: Transforming Objects

let users = [
  { id: 1, name: 'Ava' },
  { id: 2, name: 'Ben' }
];

let userInfo = users.map(user => ({
  userId: user.id,
  userName: user.name
}));

console.log(userInfo);
// Output - [ { userId: 1, userName: 'Ava' }, { userId: 2, userName: 'Ben' } ]
In this case, we're working with an array of objects. The map() method creates a new array where each object has a different structure. Since we're returning an object directly, we wrap it in parentheses to avoid confusion with a function block. This is a common use case in real apps‚Äîreshaping data before displaying it on a UI.

Key Takeaways

map() always returns a new array.
It doesn't modify the original array.
Use implicit return for simple expressions.
Use explicit return if you're using curly braces or need multiple lines.
It's especially powerful for transforming arrays of objects, like reshaping API data or preparing things for display.

QESTIONS:

Square the Numbers
You are given an array of integers. Your task is to create a new array where each element is the square of the original array's elements using the map() function.

SOLUTIONs:
const numbers = [1, 2, 3, 4, 5];

// Using map() to square each number
const squaredNumbers = numbers.map(number => number * number); 

console.log(squaredNumbers);


Explanation:
The map() function iterates through each element of the numbers array.

For each element, it applies the function number => number * number, which squares the element.

The result is stored in squaredNumbers, and when you log it, it will print [1, 4, 9, 16, 25].

Convert Array of Strings to Uppercase Using map()
You are given an array of strings. Your task is to create a new array where each string is converted to its uppercase(use toUpperCase function) version. You must use the .map() method to achieve this.

INPUT:
['hello', 'world', 'javascript']

OUTPUT:
[ 'HELLO', 'WORLD', 'JAVASCRIPT' ]


OUTPUT:
const words = ['hello', 'world', 'javascript'];
const uppercaseWords = words.map(word => word.toUpperCase());
console.log(uppercaseWords);
-----------------------------------------------------------------------------
Destructuring Nested Arrays of Objects
You have an array of objects, where each object represents a product with a name and price. Your goal is to create a new array containing only the price of each product. You must use the .map() method.

Sample 1:
Input
Output
[
  { name: 'Laptop', price: 1200 },
  { name: 'Mouse', price: 25 },
  { name: 'Keyboard', price: 75 }
]
[ 1200, 25, 75 ]

SOLUTIONS:

const products = [
  { name: 'Laptop', price: 1200 },
  { name: 'Mouse', price: 25 },
  { name: 'Keyboard', price: 75 }
];
//PRODUCT CONTAINS OBJECTS
//name : name of the products { name: 'Laptop', price: 1200 },
//price: the price of the products(e.g., 1200, 25, 75).

// complete the code 
const prices = products.map(({price}) => price);
//map() : is an array method that create a new array by applying a given funcation to each elemts of the aaray
console.log(prices);

//Destructuring: ({ price }) is using object destructuring to directly extract the price property from each object in the array.
//Arrow function (=>): ({ price }) => price is an arrow function that takes an object, extracts the price property, and returns it.

INTRODUCATION TO REACT:
React is a JavaScript library used to build fast and interactive user interfaces for websites. It was created by Facebook (now Meta) to make web development easier and better.

üîç What is React?
React helps developers create web pages where content updates automatically when data changes ‚Äî without refreshing the whole page.

‚úÖ Why is React Important?
Before React, developers had to write a lot of code to update small parts of a webpage. With React, you can:

üß© Reuse components ‚Äì build once and use anywhere

‚ö° Update only changed parts using the Virtual DOM

üöÄ Improve performance and make apps faster

üéØ Focus only on UI, which makes learning easier

üíº Why Should You Learn React?
Top companies like Netflix, Instagram, WhatsApp, Airbnb, Uber use React. Learning React helps you:

Get better job opportunities

Build your own modern web apps

Work on real-world projects

üìö Prerequisites
Before learning React, you should know:

Basic JavaScript

Your First React Application
Welcome! Now that you understand what React is and why it was created, it‚Äôs time to build your very first React application.

Think of this as the foundation of everything you‚Äôll learn. We‚Äôll build a simple "Hello World" app using pure JavaScript and React without any extra setup. This will help you understand how React works behind the scenes.

Step 1: Setting Up Files
To begin, create two files:

index.html ‚Äì The main HTML file (where our React app will run).
index.js ‚Äì The JavaScript file to write our React code.
Step 2: Writing the Code
index.html
This file will be a simple HTML structure that includes a placeholder, where our React code will display content.

Explanation:
We create a basic HTML file.
The <div id="root"></div> acts as a container for our React application.
We include a script tag to load our index.js file.
index.js
This file contains React code that will run inside our HTML file.

Explanation:
Selecting the Root Element:
document.querySelector('#root') selects the <div id="root"></div> from index.html.
Creating a React Element:
React.createElement("h1", null, "Hello, React World!") creates an <h1> element with the text "Hello, React World!".
This is a fundamental React concept called the Virtual DOM. Instead of manipulating the real DOM directly, React updates a virtual representation first.
Rendering the Application:
ReactDOM.createRoot(root) initializes React inside our root element.
.render(element) tells React to render our <h1> inside the root div.
How Does This Work?
When this code runs in the browser:

The browser loads the index.html file.
React finds the <div id="root"></div>.
React creates a virtual <h1> element with "Hello, React World!".
React updates the DOM and displays our message inside the root div.

index.js
// Step 1: Import dependencies
const root = document.querySelector('#root'); // Select the root div

// Step 2: Create a React element
const element = React.createElement("h1", null, "Hello, React World!");

// Step 3: Render the application
const reactRoot = ReactDOM.createRoot(root);
reactRoot.render(element);

STYLE.CSS
body {
        font-family:'Segoe UI',sans-serif;
        background-color:#f9f9f9;
        text-align:center;
        margin-top:100px;
}
h1 {
        color:#2c3e50;
        font-size:3rem;
}


INDEX.HTML
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>My First React App</title>
</head>
<body>
    <!-- The root div where React will render -->
    <div id="root"></div>

    <!-- Load React and ReactDOM CDN (for quick setup without installing anything) -->
    <script src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    
    <!-- Load our JavaScript file -->
    <script src="index.js"></script>
</body>
</html>


Some modern JS features (like let, const, arrow functions, etc.)

If you‚Äôre not comfortable with JavaScript, learn that first.


Introduction to jsx
In the last lesson, we saw how to create a React element using plain JavaScript. While this works, most developers prefer a special syntax called JSX (JavaScript XML) to make writing React components easier and more readable.

JSX vs JavaScript
Using JavaScript alone, we would write something like this:

export function App() {
  return (
    'h1',
    { id: 'greeting' },
    'Hello, React!'
  );
}
Now, let's see the same example written in JSX:

export function App() {
  return (
    <h1 id="greeting">
        Hello, React!
    </h1>
  );
}
JSX makes the code much easier to read and write. Instead of multiple function calls, we use an HTML-like syntax to define our elements.

Why JSX is Useful
JSX is not required to write React, but it makes development much more efficient. Here are a few reasons why JSX is widely used:

Readability: JSX looks much like HTML, making it easier to understand.
Better Structure: JSX allows us to create complex UI structures in an easier-to-follow format.
Now that you understand JSX, try creating your own JSX element.

Task:
Update the App function in App.jsx.
Add a <p> tag with the text "I am learning JSX!".
The render part of the app is written in main.jsx. This follows the standard structure of a React project.

Once you‚Äôve completed the task, click the Submit button and proceed to the next lesson.

solutions:

APP.JSX
export function App() {
  return (
    <div>
      <h1 id="greeting">Hello, React!</h1>
      <p>I am learning JSX!</p>
    </div>
  );
}

MAIN.JSX
import React from 'react';
import ReactDOM from 'react-dom/client';
import { App } from './App';  

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

OUTPUT:

Hello, React!
I am learning JSX!

How JSX Works Behind the Scenes
Imagine you write some JSX code like this:

const element = <h1>Hello, React!</h1>;
It looks just like HTML, right? But here‚Äôs a secret: browsers don‚Äôt actually understand JSX! So, before the browser can display that h1 tag on the screen, JSX needs to be converted into regular JavaScript.

A tool like Babel does this job. It transforms the JSX into something that the browser can understand:

const element = React.createElement('h1', null, 'Hello, React!');
This React.createElement function tells React what to create (h1), gives it any necessary properties (null for now), and specifies what content goes inside ('Hello, React!').

Now, let's add an attribute, like an id:

// JSX with an attribute
const title = <h2 id="main-title">Another Title</h2>;
What Babel turns it into

const jsTitle = React.createElement(
  'h2',                          // 1. The type: 'h2'
  { id: 'main-title' },          // 2. The props: an object with id attribute
  'Another Title'                // 3. The children: the text content
);
Notice how the id="main-title" attribute in JSX becomes an object { id: 'main-title' } as the second argument to React.createElement. This props object holds all the attributes you give to the JSX tag.

A Little Brain Teaser!
JSX might look like HTML, but it‚Äôs actually JavaScript! So here‚Äôs a quick question for you:

Question:
What will this JSX code be converted into when processed by Babel?

const element = <button className="btn">Click me!</button>;

Correct Answer:

const element = React.createElement("button", { className: "btn" }, "Click me!");
Explanation:
JSX is just a syntactic sugar for React.createElement(). When converted, each JSX element turns into a JavaScript function call:  

const element = React.createElement("button", { className: "btn" }, "Click me!");

- The tag name (`button`) becomes the first argument.  
- The attributes (`className="btn"`) turn into a JavaScript object.  
- The content inside (`Click me!`) becomes the third argument.  


JSX Comments and Type Conversion in React
When working with JSX in React, there are some special rules to keep in mind, especially for comments and how values are converted. Let‚Äôs go through these concepts in a simple way.

Adding Comments in JSX
In JavaScript, we use // for single-line comments and /* */ for multi-line comments. However, in JSX, we must use multi-line comments inside curly brackets {}.

Example:

const element = (
  <div>
    {/* This is how we add a comment in JSX */}
    <p>Hello World!</p>
  </div>
);
‚úÖ Correct: {/* Comment here */}
‚ùå Incorrect: // Comment here (This will render the text as it is)

This happens because JSX treats everything inside curly braces {} as JavaScript. A single-line comment (//) would break the JSX syntax.

How JSX Handles Different Types of Values
JSX automatically converts some values (like numbers and booleans) into strings when needed.

Boolean Values in JSX
For attributes like checked, disabled, or required, you can pass values as strings or actual booleans. Both work, but JSX makes sure they are handled correctly.

// Both are valid!
<input type="checkbox" checked="true" />
<input type="checkbox" checked={true} />
How JSX handles it:

"true" (as a string) is converted as needed.
{true} (as a boolean) is used directly.
Numbers in JSX
JSX also converts numbers automatically when you use them in attributes like min and max.

// Both are correct!
<input type="range" min="5" max="100" />
<input type="range" min={5} max={100} />
React treats these the same because it automatically converts {5} and {100} into strings when needed in HTML attributes.

Key Things to Remember
JSX expressions use {} to include JavaScript inside HTML-like code.
Comments in JSX must always be written inside {/* */} brackets.
React automatically converts numbers and booleans to strings where needed.
JSX treats everything outside {} as plain text.

Differences Between HTML and JSX
JSX may look similar to HTML, but there are a few important differences that you need to be aware of when working with React. Below, we'll explore those differences and how JSX differs from regular HTML.

Reserved Words
JavaScript has several reserved words with built-in functionality. Since JSX gets converted into JavaScript, we cannot use these reserved words as attribute names in JSX.

For example, in HTML we might write:

<label for="name">Name:</label>
<input id="name" class="input-field" />
However, in JSX, for and class are reserved words. To avoid conflicts, React uses:

for ‚Üí htmlFor
class ‚Üí className
So the correct JSX version would be:

<label htmlFor="name">Name:</label>
<input id="name" className="input-field" />
Self-Closing Tags
In HTML, some tags don‚Äôt need to be explicitly closed, like:

<img src="image.png">
However, JSX requires all tags to be closed properly:

<img src="image.png" />
Without the /, JSX will throw an error.

Case Sensitivity in Tags
In HTML, we can write tags in uppercase or lowercase:

<HEADER>
  <H1>Hello World!</H1>
</HEADER>
However, JSX is case-sensitive, meaning that tags must be written in lowercase:

<header>
  <h1>Hello World!</h1>
</header>
This is because JSX uses the case of the tag to determine whether it is an HTML element or a custom component.

CamelCase for Attributes
In JSX, multi-word attributes must be written in camelCase.
For example, instead of this HTML:

<video autoplay></video>
We use this JSX:

<video autoPlay={true} />
Some other examples include:

onclick ‚Üí onClick
tabindex ‚Üí tabIndex
stroke-dasharray ‚Üí strokeDasharray
Data and ARIA Attributes
There are two exceptions where dashes are allowed:

data-* attributes (used for storing custom data)
aria-* attributes (for accessibility)
For example:

<button data-test-id="submit-btn" aria-label="Submit">
  Submit
</button>


Inline Styles in JSX
In JSX, styles are applied using an object with camelCase property names, differing from regular HTML, where styles are written as strings.

1. Inline Styles in JSX
In HTML, styles are written as a string:

<h1 style="color: red;">Hello World!</h1>
In JSX, styles are passed as an object inside double curly brackets { { } }:

<h1 style={{ color: 'red' }}>Hello World!</h1>
üîπ The first {} tells React you're writing JavaScript.
üîπ The second {} contains the style object with key-value pairs.

2. CamelCase for CSS Properties
Notice background-color in HTML became backgroundColor in JSX? In JavaScript objects, you can't have hyphens in property names. So, CSS properties like font-size or text-align become fontSize and textAlign in JSX style objects. This "camelCase" naming is standard.

3. React Automatically Appends "px"
For certain properties, React assumes "px" if you pass a number:

<div style={{ width: 200 }}>Hello</div>  
// React interprets this as width: 200px
However, some properties (e.g., lineHeight and opacity) do not assume "px":

<p style={{ lineHeight: 20 }}>Hello</p>  
// React treats this as 20, not 20px
To explicitly ensure "px", provide the value as a string:

<p style={{ lineHeight: '20px', backgroundColor: 'lightblue' }}>Hello</p>
Task: Apply Inline Styles in JSX
In this task, you will create a React component that applies inline styles to a <div>.

Task Requirements:
Update the component named StyledBox that:

Has a width of 200px.
Has a height of 100px.

SOLUTIONS:

import react from 'react';

export default function StyledBox() {
  return (
    <div
      style={{
        width: '200px',          
        height: '100px',         
        backgroundColor: 'lightblue',
        color: 'white',
        display: 'flex',
        justifyContent: 'center',
        alignItems: 'center',
        fontSize: '18px'
      }}
    >
      Styled Box
    </div>
  );
}

Differences Between HTML and JSX
Valid HTML:

<DIV class="container">
  <p>Hello, World!</p>
</DIV>
Broken JSX:

<DIV class="container">
  <p>Hello, World!</p>
</DIV>

Correct Answer(s):

a. <DIV>
b. class="container"
Explanation:
In JSX, <DIV> (uppercase) is invalid as tags must be lowercase, and class is replaced with className. The correct JSX would use <div className="container">. So, a and b are incorrect.

Differences Between HTML and JSX
Valid HTML:

<img src="logo.png" class="icon" style="width: 50px">  
<label for="username">Username</label>  
<input type="checkbox" checked>  
<button onclick="submit()">Submit</button>  
Broken JSX:

<Img src="logo.png" className="icon" style="width: 50px" />  
<label for="username">Username</label>  
<input type="checkbox" checked="true" />  
<button onclick={submit()}>Click</button>  


Correct Answer(s):

a. <Img>
b. style="width: 50px"
c. for="username"
d. checked="true"
e. onclick={submit()}
Explanation:
<Img> ‚Üí Must be lowercase (<img />).

class ‚Üí Should be className.

style="..." ‚Üí Requires object syntax: style={{ width: '50px' }}.

for="username" ‚Üí Rename to htmlFor.

checked="true" ‚Üí Use checked={true}.

onclick ‚Üí CamelCase to onClick, and use submit (not submit()).



