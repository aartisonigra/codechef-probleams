The Whitespace Gotcha in JSX
In JSX, whitespace does not always behave the same way as it does in HTML. By default, JSX does not automatically add spaces between elements, which can sometimes lead to unexpected results.

For example, let's say we have the following JSX code:

Understanding the Issue
When we write JSX, we might assume that if we put a variable right next to some text, a space will appear automatically. But JSX treats text nodes and variables as separate elements, and it does not insert spaces between them.

On IDE, you can see an example where the missing space issue occurs.

The output will be
Incorrect: Days left:30

As you can see, the number appears right next to the colon (:) without a space. JSX is rendering them as separate elements without inserting any whitespace.

Solution: Adding Explicit Whitespace
To fix this issue, we need to explicitly add a space inside curly braces ({' '}), which tells JSX that we want an actual space in the output.

Corrected Code

const element = (
  <div>
    <strong>Days left:</strong>
    {' '}
    {eventDays}
  </div>
);
Now, the output will be correctly displayed as:
Days left: 30

Why Does This Happen?
JSX is not HTML‚Äîit compiles to JavaScript using React.createElement().
Spaces between elements are not automatically included unless explicitly added.
{' '} is used to manually insert whitespace, ensuring the proper format.


SOLUTIONS:

const eventDays = 30;

export function App() {
  return (
    <div>
      <strong>Days left:</strong>{' '}
      {eventDays}
    </div>
  );
}

=============================================================================
Task - Dynamic Greeting Card
Update the given React component to display dynamic values and additional information inside the <div>.

Show dynamic values:

Add a <p> tag to display:
<p>Hello, my name is {name}.</p>  
Add another <p> tag to show age:
<p>I am {age} years old.</p>  
Display the current year dynamically:

Use JavaScript inside JSX to show the year:
<p>Year: {new Date().getFullYear()}</p>  
Add a final message:

Insert this at the end:
<p>Enjoy your day! üéâ</p>  


SOLUTIONS:

export function App() {  
    // Defining dynamic values
    const name = "John"; 
    const age = 25; 
    const greeting = "Happy Birthday!";  

    // Styling
    const cardStyle = {
        border: "2px solid #333", 
        padding: "20px", 
        borderRadius: "10px", 
        width: "250px",
        textAlign: "center",
        boxShadow: "2px 2px 10px rgba(0,0,0,0.1)"
    }; 

    const headingStyle = {
        color: "blue",
        fontSize: "20px"
    };

    return (  
        <div style={cardStyle}>
            {/* Greeting message */}
            <h2 style={headingStyle}>{greeting}</h2>  

            {/* Displaying dynamic values */}
            <p>Hello, my name is {name}.</p>
            <p>I am {age} years old.</p>

            {/* Current year using JS expression */}
            <p>Year: {new Date().getFullYear()}</p>

            {/* Final message */}
            <p>Enjoy your day! üéâ</p>
        </div>  
    );  
}


=============================================================================



Props in React
Until now, we have created simple React components that display static content. But what if we want to make our components dynamic and reusable?

That‚Äôs where props come in! üöÄ

What Are Props in React?
Props (short for "properties") allow us to pass data from one component to another. Think of props like function arguments‚Äîthey help us customize what a component displays.

With props:

The same component can show different content.
We can make our components more flexible and reusable.
Instead of hardcoding values, we can dynamically pass data to components.
Example: Passing Props to a Component
Let‚Äôs create a Greeting Component that accepts a name as a prop and displays a custom message.

Step 1: Define the Component
function Greeting(props) {
  return <h2>Hello, {props.name}! Welcome to React! üéâ</h2>;
}
We use props.name inside JSX to display the dynamic name.
props is an object that holds the values passed to the component.
Step 2: Use the Component with Props
Now, let‚Äôs use the Greeting component inside App.jsx and pass different names!

function App() {
  return (
    <div>
      <Greeting name="John" /> {/* Passing "John" as a prop */}
      <Greeting name="Emma" /> {/* Passing "Emma" as a prop */}
    </div>
  );
}

export default App;
Output Screen:
Hello, John! Welcome to React! üéâ  
Hello, Emma! Welcome to React! üéâ
As you can see, the same component (Greeting) shows different messages based on the data (props) we pass to it!

In the example above, we passed strings as props. But what if we want to pass numbers or other data types?

Use {} for Non-String Props
When passing numbers, variables, or JavaScript expressions, wrap them in curly braces {}. This tells React: ‚ÄúHey, this is JavaScript, not a string!‚Äù

Let‚Äôs add an age prop to our Greeting component:

function Greeting(props) {
  return (
    <h2>
      Hello, {props.name}! You are {props.age} years old. Welcome to React! üéâ
    </h2>
  );
}
Now pass the age prop as a number using {}:

function App() {
  return (
    <div>
      <Greeting name="John" age={25} /> {/* ‚úÖ Correct: age is a number */}
      <Greeting name="Emma" age={28} />
    </div>
  );
}
Why Not Use Quotes?
If you write age="25" (with quotes), React treats it as a string. Curly braces ensure it‚Äôs parsed as a number or JavaScript expression.

Key Takeaway:

Use " " for strings.
Use { } for numbers, variables, or dynamic values.
Your Task
Task: Create a UserProfile Component Using Props

Now that you‚Äôve learned about props, let‚Äôs put this knowledge into practice!

Create a new function UserProfile inside App.jsx.
Inside this function, return a <div> that contains:
A heading: "User Profile:"
A paragraph to display the name (using props.name)
A paragraph to display the age (using props.age)
Use UserProfile inside App and pass different values for name and age.
Ensure the component appears twice with different names and ages.
Expected Output on Screen:
User Profile:  
Name: Alice  
Age: 25  

User Profile:  
Name: Bob  
Age: 30 

SOLTUIONS:

// UserProfile component: A reusable component to display user information
function UserProfile(props) {
  return (
    <div>
      {/* Heading for the user profile section */}
      <h3>User Profile:</h3>

      {/* Displaying the user's name from props */}
      <p>Name: {props.name}</p>

      {/* Displaying the user's age from props */}
      <p>Age: {props.age}</p>
    </div>
  );
}

// App component: Renders multiple UserProfile components with different data
function App() {
  return (
    <div>
      {/* Passing different names and ages to the UserProfile component */}
      <UserProfile name="Alice" age={25} />
      <UserProfile name="Bob" age={30} />
    </div>
  );
}

export default App; // Exporting the App component for use in the application


PROBELMAS:

Props in React
We have already created a greeting card in the last lesson! Now, we will use components and props to make the solution more efficient and reusable.

Your Task:
Create a reusable component <GreetingCard /> that takes name, age, and greeting as props.
Use instances of <GreetingCard /> inside the App component with values for name, age, and greeting.
Make sure not change the messages.


SOLUTIONS:

// Reusable GreetingCard component
export function GreetingCard({ name, age, greeting }) {
    const cardStyle = {
      border: "2px solid #333",
      padding: "20px",
      borderRadius: "10px",
      width: "250px",
      textAlign: "center",
      boxShadow: "2px 2px 10px rgba(0,0,0,0.1)"
    };
  
    const headingStyle = {
      color: "blue",
      fontSize: "20px"
    };
  
    return (
      <div style={cardStyle}>
        <h2 style={headingStyle}>{greeting}</h2>
  
        <p>Hello, my name is {name}.</p>
        <p>I am {age} years old.</p>
  
        <p>Year: {new Date().getFullYear()}</p>
  
        <p>Enjoy your day! üéâ</p>
      </div>
    );
  }
  
  // App component using GreetingCard
  export function App() {
    return (
      <>
        <GreetingCard name="John" age={25} greeting="Happy Birthday!" />
        <GreetingCard name="Alice" age={30} greeting="Congratulations!" />
      </>
    );
  }
  
  export default App;

==============================================================================
Iteration in React
When working on a React application, we often need to display a list of dynamic items, such as a list of contacts in a CRM application. Instead of manually writing each component for every contact, we can use iteration to generate them dynamically.

Why Use Iteration?
In a real-world scenario, data changes frequently. Imagine a CRM software where every user has their own set of contacts. These contacts are not fixed; they can be added, removed, or modified.

Hardcoding each contact like this:

<ul>
  <GreetingCard 
    name="Alice" 
    age={30} 
    greeting="Happy Birthday, Alice!" 
  />
  <GreetingCard 
    name="Bob" 
    age={25} 
    greeting="Wishing you a fantastic day, Bob!" 
  />
</ul>
This works but isn't flexible. If we have thousands of contacts, writing each component manually is not practical.

Using Iteration to Render Components
Instead, we store our contact data in an array and use JavaScript's .map() function to iterate over it and generate the components dynamically.

Step 1: Storing Data in an Array
Let's say we have an array of contacts:

const people = [
  {
    id: 1,
    name: "Alice",
    age: 30,
    greeting: "Happy Birthday, Alice!"
  },
  {
    id: 2,
    name: "Bob",
    age: 25,
    greeting: "Have a great day, Bob!"
  },
  {
    id: 3,
    name: "Charlie",
    age: 35,
    greeting: "Wishing you all the best, Charlie!"
  }
];
Step 2: Using .map() to Generate Components
We use .map() to iterate over the contacts array and generate a <ContactCard /> for each item:

<ul>
  {people.map(person => (
    <GreetingCard 
      key={person.id} 
      name={person.name} 
      age={person.age} 
      greeting={person.greeting} 
    />
  ))}
</ul>
Explanation
.map() loops through the contacts array.
For each contact, it returns a <GreetingCard /> component with data passed as props.
A unique key is assigned (using person.id) to help React track changes efficiently.
Benefits of Using Iteration
Handles dynamic data ‚Äì Whether you have 3 contacts or 500, your code stays clean and efficient.
Keeps code organized ‚Äì Instead of repeating code, you use a reusable method.
Easier to maintain ‚Äì When new contacts are added, the UI updates automatically.

GreetingCard Component
Create personalized greeting cards that show each person's name, age, greeting message, and favorite color using React components.

Greeting card
Steps to Follow:

Show Favorite Color in Greeting Card

Modify the GreetingCard component to display the person's favorite color in a new paragraph (<p> tag) below their age.
Use the existing favoriteColor prop to display this information.
Example format: <p> My favorite color is {favoriteColor}.</p>
Render Cards for All People

In the App component, display a GreetingCard for every person in the people array.
Pass all required information (name, age, greeting message, favorite color) as props to each card.
Use the map() method to loop through the people array.


import React from 'react';

function GreetingCard({ name, age, greeting, favoriteColor }) {
  const cardStyle = {
    backgroundColor: "#fff",
    padding: "30px",
    borderRadius: "12px",
    width: "300px",
    textAlign: "left",
    boxShadow: "0 6px 20px rgba(0, 0, 0, 0.1)",
    fontFamily: "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif",
    margin: "20px",
    borderTop: `5px solid ${favoriteColor || '#ddd'}`,
  };

  const headingStyle = {
    color: "#333",
    fontSize: "22px",
    fontWeight: "600",
    marginBottom: "20px",
    marginTop: "0",
    borderBottom: "1px solid #eee",
    paddingBottom: "10px",
  };

  const baseParagraphStyle = {
    color: "#555",
    fontSize: "15px",
    lineHeight: "1.7",
    marginBottom: "12px",
  };

  const favoriteColorTextStyle = {
    fontWeight: 'bold',
    color: favoriteColor || '#555'
  };

  const footerStyle = {
    ...baseParagraphStyle,
    fontSize: "13px",
    color: "#888",
    marginTop: "25px",
    marginBottom: "5px",
  };

  const emojiStyle = {
    fontSize: '1.2em',
    display: 'inline-block',
    marginLeft: '5px',
    verticalAlign: 'middle'
  }

  return (
    <div style={cardStyle}>
      <h2 style={headingStyle}>{greeting}</h2>

      <p style={{ ...baseParagraphStyle, fontWeight: 500 }}>
        Hello, my name is <span style={{ fontWeight: 'bold' }}>{name}</span>.
      </p>
      <p style={{ ...baseParagraphStyle, fontWeight: 500 }}>
        I am {age} years old.
      </p>

      {/* STEP 1: Display favorite color */}
      <p style={{ ...baseParagraphStyle }}>
        My favorite color is <span style={favoriteColorTextStyle}>{favoriteColor}</span>.
      </p>

      <p style={footerStyle}>Year: {new Date().getFullYear()}</p>
      <p style={{ ...footerStyle, marginTop: '0' }}>
          Have a great day! <span style={emojiStyle}>üéâ</span>
      </p>
    </div>
  );
}

export function App() {
  const people = [
    { id: 1, name: "Alice", age: 30, greeting: "Happy Birthday, Alice!", favoriteColor: "mediumpurple" },
    { id: 2, name: "Bob", age: 25, greeting: "Have a fantastic day, Bob!", favoriteColor: "tomato" },
    { id: 3, name: "Charlie", age: 35, greeting: "Best wishes, Charlie!", favoriteColor: "mediumseagreen" }
  ];

  const appContainerStyle = {
      display: 'flex',
      flexWrap: 'wrap',
      justifyContent: 'center',
      alignItems: 'flex-start',
      backgroundColor: '#f4f7f6',
      minHeight: '100vh'
  };

  return (
    <div style={appContainerStyle}>
      {/* STEP 2: Render GreetingCards */}
      {people.map(person => (
        <GreetingCard
          key={person.id}
          name={person.name}
          age={person.age}
          greeting={person.greeting}
          favoriteColor={person.favoriteColor}
        />
      ))}
    </div>
  );
}

export default App;


  
