The Whitespace Gotcha in JSX
In JSX, whitespace does not always behave the same way as it does in HTML. By default, JSX does not automatically add spaces between elements, which can sometimes lead to unexpected results.

For example, let's say we have the following JSX code:

Understanding the Issue
When we write JSX, we might assume that if we put a variable right next to some text, a space will appear automatically. But JSX treats text nodes and variables as separate elements, and it does not insert spaces between them.

On IDE, you can see an example where the missing space issue occurs.

The output will be
Incorrect: Days left:30

As you can see, the number appears right next to the colon (:) without a space. JSX is rendering them as separate elements without inserting any whitespace.

Solution: Adding Explicit Whitespace
To fix this issue, we need to explicitly add a space inside curly braces ({' '}), which tells JSX that we want an actual space in the output.

Corrected Code

const element = (
  <div>
    <strong>Days left:</strong>
    {' '}
    {eventDays}
  </div>
);
Now, the output will be correctly displayed as:
Days left: 30

Why Does This Happen?
JSX is not HTMLâ€”it compiles to JavaScript using React.createElement().
Spaces between elements are not automatically included unless explicitly added.
{' '} is used to manually insert whitespace, ensuring the proper format.


SOLUTIONS:

const eventDays = 30;

export function App() {
  return (
    <div>
      <strong>Days left:</strong>{' '}
      {eventDays}
    </div>
  );
}

=============================================================================
Task - Dynamic Greeting Card
Update the given React component to display dynamic values and additional information inside the <div>.

Show dynamic values:

Add a <p> tag to display:
<p>Hello, my name is {name}.</p>  
Add another <p> tag to show age:
<p>I am {age} years old.</p>  
Display the current year dynamically:

Use JavaScript inside JSX to show the year:
<p>Year: {new Date().getFullYear()}</p>  
Add a final message:

Insert this at the end:
<p>Enjoy your day! ðŸŽ‰</p>  


SOLUTIONS:

export function App() {  
    // Defining dynamic values
    const name = "John"; 
    const age = 25; 
    const greeting = "Happy Birthday!";  

    // Styling
    const cardStyle = {
        border: "2px solid #333", 
        padding: "20px", 
        borderRadius: "10px", 
        width: "250px",
        textAlign: "center",
        boxShadow: "2px 2px 10px rgba(0,0,0,0.1)"
    }; 

    const headingStyle = {
        color: "blue",
        fontSize: "20px"
    };

    return (  
        <div style={cardStyle}>
            {/* Greeting message */}
            <h2 style={headingStyle}>{greeting}</h2>  

            {/* Displaying dynamic values */}
            <p>Hello, my name is {name}.</p>
            <p>I am {age} years old.</p>

            {/* Current year using JS expression */}
            <p>Year: {new Date().getFullYear()}</p>

            {/* Final message */}
            <p>Enjoy your day! ðŸŽ‰</p>
        </div>  
    );  
}


Introduction to Components in React
By now, you are already familiar with how React works. We've worked on a project where we dynamically rendered data inside a UI and styled it using inline CSS. But now, it's time to take a step further and introduce componentsâ€”one of the most powerful concepts in React.

What is a Component?
In simple terms, a component is a self-contained, reusable piece of code that represents a specific part of the user interface. It includes everything needed for that sectionâ€”markup (HTML-like JSX), styles, and logic.

Think of components like building blocks. Instead of structuring our application separately into different files for HTML, CSS, and JavaScript, React allows us to group relevant pieces together into components. With this approach, every component is responsible for its own appearance, behavior, and logic.

If you're used to structuring applications the traditional way, this might feel a little different. Hereâ€™s a simple way to think about it:

ðŸ”¹ Traditional Approach: Keeping HTML, CSS, and JavaScript separate.
ðŸ”¹ React's Approach: Merging them into components for better organization and reusability.

Why Are Components Important?
Now that we've defined what a component is, letâ€™s dive into why theyâ€™re so valuable in React development.

Reusability
Separation of Concerns (Component-Based Structure)
Code Organization & Maintainability
Encapsulation
Improved Development Speed
Components are at the heart of Reactâ€”if you understand components, you're already on your way to mastering React.

As we continue building our projects, youâ€™ll see how components allow us to scale applications efficiently. Theyâ€™re not just a nice-to-have feature; theyâ€™re essential for structuring React apps properly.



Run
Submit
Prev
2 out of 7
Next
Now, Lets See How to Create a Component
We now know that React is all about components, and we have already discussed why they are important. Now, let's see how to create a component in the simplest way possible.

Creating a Basic React Component
A component in React is just a JavaScript function that returns JSX (which looks like HTML). Letâ€™s understand this by creating a Welcome Message component inside the same file (App.js).

Here's the Code:
function Welcome() {
  return <h2>Welcome to My React App! ðŸŽ‰</h2>;
}

function App() {
  return (
    <div>
      <Welcome /> {/* Using the Welcome component */}
      <p>React components make the UI more structured and reusable.</p>
    </div>
  );
}

export default App;
Understanding the Code
Step 1: First, we define a function called Welcome, which is our component.
Step 2: Inside this function, we return some JSX, which in this case, is an <h2> tag with a message.
Step 3: In the App function, we use the <Welcome /> component just like a regular HTML tag.
Step 4: React replaces <Welcome /> with the actual JSX returned from the Welcome function.

What Will This Render on the Screen?
Welcome to My React App! ðŸŽ‰  
React components make the UI more structured and reusable.
The Welcome component gets inserted inside the App component, making the structure of the UI clean and organized!

Your Task:
Now that youâ€™ve learned how to create a basic React component, hereâ€™s a small challenge for you!

Create a new function called Goodbye inside App.js.
This function should return a (h3 - heading) message saying goodbye (e.g., "Thanks for visiting! See you soon!").
Use the <Goodbye /> component inside the App function, below the <Welcome /> component.

SOLTUIONS:

// App.js

function Welcome() {
  return <h2>Welcome to My React App! ðŸŽ‰</h2>;
}

// âœ… Creating the new Goodbye component
function Goodbye() {
  return <h3>Thanks for visiting! See you soon!</h3>;
}

function App() {
  return (
    <div>
      <Welcome /> {/* Using the Welcome component */}
      <p>React components make the UI more structured and reusable.</p>
      
      {/* âœ… Using the Goodbye component */}
      <Goodbye />
    </div>
  );
}

export default App;
